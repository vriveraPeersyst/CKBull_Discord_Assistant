# Nervos Ecosystem

To first understand how the blockchain integration works we need to understand some important features and characteristics of the Nervos blockchain.

The blockchain network, also referred as Common Knowledge Base (CKB), is a proof-of-work blockchain platform with the ability to include smart contracts and decentralized applications.

We will briefly explain what we think is most important about the blockchain. To gain a broader and more complete knowledge please refer to the official page:

[Spur your growth: It’s never too late to start learning](https://www.nervos.org/learn)

## CKB

The CKB network has as a native currency CKBs or CKBytes. Each **CKB represents a byte of space** in the blockchain and is also used to pay transaction fees and storing data.

As such, if you want to hold some tokens, you will need some CKBs to reserve the necessary space in the blockchain. Even to just hold some funds you will need a minimum of CKBs for the space that these take.

## Scripts and addresses

To understand how the blockchain works the first thing is understanding what a script is. There are 2 types of script depending of the use: lock script and type script. The former is used to identify the owner of a cell and the second one to add additional information in the cell. A script always contains 3 fields:

- **Code hash:** A hash of the code that the script represents. This code has been previously uploaded on the blockchain with a transaction.
- **Hash type:** The type of hash of the code. It can be `type`, `data` **or `data1`.
- **Args:** Contains information about the specific script. For example, if we are creating a lock script to generate an address it contains information about the public key. If it is a type script of for example a Spore nft it contains the tokenId.

### Lock scripts

There are countless possible lock scripts for a given private key. The most usual script is the `SECP256K1_BLAKE160` . From your private key and an integer you can generate many public keys and for each public key you can generate an args value to have a lock script.

Each lock script can easily be converted into an address. For example:

The address `ckt1qzda0cr08m85hc8jlnfp3zer7xulejywt49kt2rr0vthywaa50xwsqwzv75tj0x6u90mqce97yd89vgy002dx0qyca02g` is the same as the lock script:

- Code hash: `0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8`
- Hash type: `type`
- Args: `0xc267a8b93cdae15fb06325f11a72b1047bd4d33c`

Another address created with the same secp256k1 script will have the same code hash and hash type but different args, and therefore, address.

There are much more scripts to generate lock scripts. For example: OMNILOCK, ONEPASS, FORCE BRIDGE, BIT, PWLOCK…

Each script has a different code hash and will result in a different address.

### Type scripts

The type script give extra information about the cell containing them. There are type scripts for SUDT tokens, for Spore Nfts, MNfts, NRC721 Nfts, DAO holdings, XUDTs and much more.

Depending on the script the args represent one thing or another. For tokens (fungible or not) they represent their id.

Paired with the data of the cell model we can have the information of the number of fungible tokens or having the different fields of the nft encoded or the amount locked for the DAO.

## Cell model

Instead of wallets having an amount that represents the funds the wallet has in CKB everything holdable comes from cells.

A cell is a unit in the blockchain that occupies some space and holds CKBs as well as data or other optional information. For those familiar with bitcoin utxo system it is similar but at the same time differs a little bit. See the diagram below:

![Untitled](https://prod-files-secure.s3.us-west-2.amazonaws.com/6698e2f2-49ee-4ea4-94f1-18fd55562335/8102ec04-d4ef-41d5-87b5-e0f8eccaec5c/Untitled.png)

Let’s see what each of the cell means:

- **Capacity:** It’s the amount of locked native tokens in the cells. For simple cells without data or a type script the minimum capacity required to form a cell and save it in the blockchain is 61 CKBs. This minimum capacity depends on all the fields of the cell and can vary. For example, an SUDT token needs at least a capacity of 141 CKBs and a cell containing an NFT or DAO information may take a different amount of minimum space and therefore CKBs.
- **Lock script:** It holds the information of the holder of the chain.
- **Type script:** It’s an optional field and, if present, it contains the information about the data and the type of the cell.
- **Data:** Contains any extra information needed by the type script

Therefore, to compute the total funds someone has we have to sum all the capacities of all the cells that belongs to the lock scripts that can be generated from a private key.

We usually make the distinction of free CKBs and locked CKBs. We talk about locked CKBs when there is a type script in the cell and free otherwise.

## Transactions

Transactions are the manipulation of cells. In each transaction there are cells that are destroyed and other cells that are created.

Let’s see the fields of the transactions:

- **Inputs:** These are the cells that the signer(s) of the transaction have ownership of.
- **Outputs:** These are the resulting cells of the transaction. The sum of the capacities of the output must always be a bit less than the sum of the inputs. The difference is the paid fee and the bigger the faster the transaction will be executed.
- **Cell dependencies:** Each input script (lock or type) needs its correspondent cell dependency. The cell dependency is the out point of a transaction which is the transaction hash plus the output index. This correctly identifies a given cell in which the code was originally uploaded. If, for example, there is more than 1 secp256k lock scripts we only need to reference it once. After this if there is an SUDT token we should add the dependency as well.
- **Fixed entries:** This field is usually used for any type of tokens or DAO transactions. It fixes one of the outputs to a position.
- **Witnesses:** This field is necessary to check the correctness of the transaction and the signature.
- **Signing entries:** We need a different signing entry for each input with a different lock script.

With all of these fields we are capable of sending everything. The type of the transaction can be deduced by the inputs and outputs of the transaction. If, for example, we owned the inputs neither the inputs or outputs cells have any type script we are sure it would be a SEND NATIVE transaction. If we did not own the inputs and they have no type script it would mean it is a RECEIVE NATIVE transaction. Depending on the type scripts the transactions can have more complex types.

A basic transaction could be viewed as such:

![basic_nervos_tx.drawio.png](https://prod-files-secure.s3.us-west-2.amazonaws.com/6698e2f2-49ee-4ea4-94f1-18fd55562335/4d00caeb-6f6f-4722-8a6e-f26584d1b07a/basic_nervos_tx.drawio.png)

As we can see from 2 inputs of a total of 300 CKBs we create an output of 160 CKB (amount sent) and 139 CKBs remain for us which we create an output cell for them. We only need 1 signature and cell dependency.

A more complex example sending token could be:

![token_nervos_tx.drawio.png](https://prod-files-secure.s3.us-west-2.amazonaws.com/6698e2f2-49ee-4ea4-94f1-18fd55562335/2632ebe8-f8da-4240-88b0-bfdf3f6419e4/token_nervos_tx.drawio.png)

In this situation we need 2 cell dependencies. One for the lock script and another one for the token type script. As we send from 2 of our addresses (sender addr1 and sender addr2) we need also 2 signatures, one for each input. As we only want to send 75 of the 100 token that we have we create 2 token outputs. One with 75 tokens for the receiver and one with 25 remaining for us. Take into account that separating these 100 tokens in two cells costs us 140 more CKBs. Finally we create an output cell for the remaining CKBs of the sender. We also fix the first output to be sure it stays on the position 0.

## DAO

One of the integrated functionalities of the blockchain is the DAO. A Decentralized Autonomous Organization or DAO  is an organization or community owned by their members. The staked power of the DAO grants rewards to its members depending on the deposited amount.

In the case of Nervos, it acts as what they call an inflationary shelter. So that the funds you are not using grow according to inflation.

The DAO works in cycles. Each cycle lasts for 180 epochs and each epoch lasts for approximately 4 hours. This means each cycle lasts for 30 days. The cycle is independent for each staked amount. This means that the cycle for each deposit starts with the block the deposit was made. If you do not withdraw the amount a new cycle will start after each completed cycle.

At any desired time you can make a withdraw call to a deposited amount to withdraw from the DAO. When withdrawed the amount does not generate any rewards and is locked until the end of the current cycle of the amount. As cycles end in 30 days the way of obtaining the most rewards is by withdrawing by the end of the cycle but before a new one starts.

Once the amount is withdrawed from the DAO and the cycle has ended you can unlock the amount to use it normally in your account. It is important that you keep track of each amount and its cycle so you can reap the maximum reward and use your funds when you need it.

One last important feature to understand is that the interest is compound. This means that the generated rewards also count for new rewards without the need to withdraw and make a new deposit.